#pragma version ^0.4.4;
#pragma compute-asm-ltr;

;; Wallet inplug-v2
;; - supports up to 255 actions in one external message
;; - supports plugins in form of continuations (not independent contracts)
;; - stores plugins as masterchain libraries via single registry contract
;; - supports onchain code execution without attaching it as plugin
;; - supports Ed25519 signatures

(cell, int) fixed::udict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGETREF" "NULLSWAPIFNOT";
cell end_exotic(builder b) impure asm "ONE ENDXC";
forall X, Y -> Y unsafe::transmute(X) asm "NOP";
int equal_slices(slice a, slice b) asm "SDEQ";
() terminate_if(int) impure asm "IFRETALT";
() set_c5(cell) impure asm "c5 POPCTR";
() terminate() impure asm "RETALT";

(slice, slice) ~load_ref_parse(slice) asm "LDREFRTOS";
(slice, ()) ~snake_next(slice) asm "LDREF ENDS CTOS";
int load_maybe_op(slice) asm "32 PLDUZ";

;; -------------------------- NON-ISOLATED EXECUTION ---------------------------

() signed_invoke(cont f) impure asm "0 0 CALLXARGS";

;; no need to RUNVM; the plugin is trusted code anyway
cell trust_invoke(cont f, int addr, cell data, slice msg, int method) impure asm(addr data msg method f)
  "4 1 CALLXARGS";

(cell, int, cell) vm_invoke(cont f, int addr, cell data, slice msg, int method) impure asm(addr data msg method f)
  "4 PUSHINT SWAP ONE   // addr data msg method in=4 f out=1"
  "s5 PUSH              // addr data msg method in=4 f out=1 c4=data"
  "// (293 sets c3=f, c4=data, returns c4', c5 and one value from stack)"
  "293 RUNVM     // data' exitcode c4' c5"
  "1 1 BLKDROP2  // data' exitcode c5";

const int EMPTY_CELL_HASH = 0x96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7;

;; ---------------------------------- STORAGE ----------------------------------

const int op::invoke_onchain   = 0x6908c994;
const int op::install_plugin   = 0x79ae2d9f;
const int op::uninstall_plugin = 0x01fabff6;

const int op::invoke_plugin = 0x44d562b5;
const int op::do_signed     = 0x142c7d04;

;; limits#_ opcodes_allowed:(HashmapE 32 ()) ton_limit:(VarUInteger 16) = Limits;
;; plugin_measured$0 code:^Cell data:^Cell access_at:uint33 timeout:uint32 limits:Limits = Plugin;
;; plugin_trusted$1  code:^Cell data:^Cell  = Plugin;

;; invoke_onchain$11   code:^Cell         next:(Maybe ^Action) = Action;
;; install_plugin$01   state_init:^Plugin next:(Maybe ^Action) = Action;
;; uninstall_plugin$00 id:uint256         next:(Maybe ^Action) = Action;

;; do_signed_timed#142c7d04 signature:?
;;     request:^[ctr:uint64 deadline:uint32 actions:(Maybe ^Cell) do:(Maybe ^Action)] = ExtInMsgBody;
;; invoke_plugin#44d562b5 id:uint256 data:Any = ExtInMsgBody;
;; invoke_plugin#44d562b5 id:uint256 data:Any = IntInMsgBody;

(int, cell, slice) load_contract() inline {
  ;; key::public::ed25519#_ key:bits256 = Key;
  ;; _ counter:uint64 plugins_state:(HashmapE 256 ^Plugin) owner_key:Key = Storage;

  slice ds = get_data().begin_parse();
  int counter = ds~load_uint(64);       ;; seqno protection, just contains subwallet ID as well
  cell plugins = ds~load_dict();
  return (counter, plugins, ds);
}

() save_contract(slice key, cell plugins, int counter) impure inline {
  set_data(begin_cell().store_uint(counter, 64).store_dict(plugins).store_slice(key).end_cell());
}
;; -------------------------------- GET-METHODS --------------------------------

int seqno() method_id {
  return get_data().begin_parse().preload_uint(64);
}
slice get_public_key() method_id {
  return get_data().begin_parse().slice_last(256);
}
int is_plugin_installed(int plugin_addr) method_id {
  (_, cell plugins, _) = load_contract();
  (_, int ok?) = plugins.udict_get?(256, plugin_addr);
  return ok?;
}

cell check_any_signature(slice in_msg_body, slice key) impure inline {
  cell request = in_msg_body~load_ref();
  int request_hash = request.cell_hash();
  throw_unless(310, check_signature(request_hash, in_msg_body, key.preload_uint(256)));
  return request;
}

;; ------------------------ PLUGIN MANAGEMENT FUNCTIONS ------------------------

(cell, ()) state_execute_plugin(cell state, int external?, slice in_msg_body, int plugin_id) impure inline_ref {
  slice s = state.begin_parse();

  if (s~load_uint(1)) {
    ;; we have trusted plugin
    
    (cell code, cell data) = (s~load_ref(), s.preload_ref());
    cell data = s.preload_ref();
    int start_hash = data.cell_hash();
    data = code.begin_parse().bless()
               .trust_invoke(plugin_id, data, in_msg_body, external? * 32105 + 121535);

    if (data.cell_hash() == start_hash) {
      return (state, ());
    } else {
      return (begin_cell().store_dict(code).store_ref(data).end_cell(), ());
    }
  } else {
    (int access_at, cell code, cell data, int timeout, slice limits) =
      (s~load_uint(33), s~load_ref(), s~load_ref(), s~load_uint(32), s);
    builder new_state = begin_cell().store_uint(access_at + timeout, 33).store_ref(code).store_uint(timeout, 32).store_slice(limits);

    throw_if(63, external?);  ;; we ensure that untrusted plugin is invoked by internal message
    throw_if(62, now() < access_at);
    (data, int exitcode, cell actions) = code.begin_parse().bless().vm_invoke(plugin_id, data, in_msg_body, 121535);
    throw_if(61, exitcode > 1);
    cell new_state = new_state.store_ref(data).end_cell();
    
    ;; execution successful! validating actions...

    ;;     c5|  out_list$_ {n:#} prev:^(OutList n) action:OutAction = OutList (n + 1);
    slice act = actions.begin_parse();

    ;;   prev|  out_list_empty$_ = OutList 0;
    cell prev = act~load_ref(); throw_unless(60, prev.cell_hash() == EMPTY_CELL_HASH);

    ;; action|  action_send_msg#0ec3c86d mode:(## 8) out_msg:^(MessageRelaxed Any) = OutAction;
    throw_unless(60, act~load_uint(32) == 0x0ec3c86d);
    int mode = act~load_uint(8); throw_if(60, mode & 188);  ;; only +1, +2 and +64 flags are allowed
    cell out_msg = act~load_ref();
    act.end_parse();

    slice msg = out_msg.begin_parse();
    throw_unless(59, (msg~load_uint(4) & 5) == 4);
    msg~load_msg_addr();
    msg~load_msg_addr();  ;; we don't check destination workchain, that would be over board
    int value = msg~load_coins();
    msg = msg.skip_dict();
    msg~load_coins();
    msg~load_coins();
    throw_if(59, msg~load_uint(97) & 1);  ;; we have to forbid StateInit because it's too complex to parse
    
    if (msg~load_uint(1)) { msg~snake_next(); }
    int op = msg.load_maybe_op();

    cell opcodes_allowed = limits~load_dict();
    (_, int ok?) = opcodes_allowed.udict_get?(32, op);
    throw_unless(58, ok? | (op == 0));
    throw_unless(58, value <= limits~load_coins());

    ;; since we're invoking untrusted plugin via internal, we have not done any actions yet
    set_c5(actions);
    return (new_state, ());
  }
}

(cell, ()) execute_plugin(cell plugins, int external?, slice in_msg_body, int plugin_addr) impure inline {
  (cell state, int ok?) = plugins.udict_get_ref?(256, plugin_addr);
  throw_unless(128, ok?);
  state~state_execute_plugin(external?, in_msg_body, plugin_addr);
  return ~udict_set_ref(plugins, 256, plugin_addr, state);
}

(cell, ()) install_plugin(cell plugins, cell init) inline {
  return ~udict_set_ref(plugins, 256, init.cell_hash(), init);
}
(cell, int) uninstall_plugin(cell plugins, int plugin_addr) inline {
  return udict_delete?(plugins, 256, plugin_addr);
}

;; ------------------------------- ACTION METHOD -------------------------------

(cell, cell) ~do(cell plugins, cell action) inline {
  slice action = action.begin_parse();
  int op = action~load_uint(2);
  
  if (op == 0) {
    plugins~uninstall_plugin(action.preload_uint(256));
  } elseif (op == 1) {
    plugins~install_plugin(action~load_ref());
  } elseif (op == 3) {
    action~load_ref_parse().bless().signed_invoke();
  } else {
    throw(303);
  }
  
  return (plugins, action.preload_maybe_ref());
}

;; ----------------------- RECV_INTERNAL + RECV_EXTERNAL -----------------------

() main(slice in_msg_body) {
  terminate_if(in_msg_body.load_maybe_op() != op::invoke_plugin);  ;; automatically ignores bounced/empty messages
  in_msg_body~skip_bits(32);
  int plugin_addr = in_msg_body~load_uint(256);

  (int counter, cell plugins, slice key) = load_contract();
  plugins~execute_plugin(0, in_msg_body, plugin_addr);
  save_contract(key, plugins, counter);
}

() recv_external(slice in_msg_body) {
  int op = in_msg_body~load_uint(32);
  if (op == op::do_signed) {
    (int counter, cell plugins, slice key) = load_contract();
    slice request = in_msg_body.check_any_signature(key).begin_parse();
    throw_unless(312, request~load_uint(64) == counter);
    throw_unless(313, request~load_uint(32) >= now());  ;; assert(deadline >= now)
    save_contract(key, plugins, counter + 1); commit(); accept_message();
    
    cell c5 = request~load_maybe_ref();
    if (~ cell_null?(c5)) { set_c5(c5); }

    cell action = request.preload_maybe_ref();
    while (~ cell_null?(action)) { action = plugins~do(action); }
    
    save_contract(key, plugins, counter + 1);
  } elseif (op == op::invoke_plugin) {
    (int counter, cell plugins, slice key) = load_contract();
    int plugin_addr = in_msg_body~load_uint(256);
    plugins~execute_plugin(-1, in_msg_body, plugin_addr);  ;; plugin is responsible for ACCEPT
    save_contract(key, plugins, counter);
  }
}

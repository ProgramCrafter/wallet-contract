forall X, Y -> Y unsafe::transmute(X) asm "NOP";

forall X -> tuple __invoke_internal((int -> X) f, tuple args, int method) asm
  "TPUSH"
  "DEPTH DEC DEC 30 SETGLOB"
  "255 PUSHINT EXPLODEVAR"
  "DUP INC"
  "ROLLX"
  "SWAP"
  "TRUE"
  "CALLXVARARGS"
  "DEPTH 30 GETGLOB SUB TUPLEVAR";

tuple novm::invoke(tuple args, int method, cell code) inline {
  cont f = (code.cell_null?()) ? get_c3() : code.begin_parse().bless();
  return f.unsafe::transmute().__invoke_internal(args, method);
}

tuple vm::invoke(tuple args, int method, cell f) asm(f args method)
  "TPUSH"
  "DEPTH DEC DEC 30 SETGLOB"
  "255 PUSHINT EXPLODEVAR"
  "DUP INC"
  "ROLLX"
  "DUMPSTK"
  "CTOS 1 RUNVM"
  "DEPTH 30 GETGLOB SUB TUPLEVAR"
  "DUMPSTK";

cell plugin_code() asm
  "B{B5EE9C7201010601004F000114FF00F4A413F4BCF2C80B0102016202030002D002037B600405004DADCBC6843002CA87B3D551781DB34DAB945BA9FAF7CCABA80232A8AE12BE619AFB2C822256B6400011AD5F89AF81B87D8040}"
  "B>boc PUSHREF";

cell my_code() asm "MYCODE";
forall X -> X tuple_index_var(tuple, int) asm "INDEXVAR";


() __test_donations_fail_transfer() {
  invoke_method_expect_fail(main, []);
}
_ __test_creator_address() {
  return invoke_method(creator_address, []);
}
tuple __test_invoke_creator_address() {
  return novm::invoke(empty_tuple(), 119703, null());
}
tuple __test_plugin_invoke_creator_address() {
  return vm::invoke(empty_tuple(), 119703, plugin_code());
}
tuple __test_vminvoke_process_internal() {
  return novm::invoke(unsafe::transmute([-1, -1, plugin_code(), "avc"]), 121535, null());
}
() __test_c7_get() {
  ~dump(get_c7());
}
_ __test_c7_tenth_get() {
  return get_c7().tuple_index_var(10);
}
_ __test_config_8() {
  return config_param(8);
}
_ __test_mycode_get() {
  return my_code();
}
() __test_mycode() {
  throw_unless(190, cell_hash(plugin_code()) == cell_hash(my_code()));
}
(int, int) __test_test_address() {
  return (slice_hash("EQB36_EfYjFYMV8p_cxSYX61bA0FZ4B65ZNN6L8INY-5gL6w"a),
          slice_hash(my_address()));
}
